{"version":3,"sources":["components/Dialogs/Message/Message.module.css","assets/images/Spinner-1s-200px.svg","components/Profile/MyPosts/MyPosts.module.css","components/Navbar/Navbar.module.css","serviceWorker.ts","components/Navbar/Navbar.tsx","components/Setting/Setting.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","redux/dialogs-reducer.ts","HOC/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","api/api.ts","redux/users-reducer.ts","components/Users/Users.tsx","common/Preloader/Preloader.tsx","components/Users/UsersAPIContainer.tsx","redux/users-selectors.ts","components/Users/UsersContainer.tsx","components/Profile/ProfileInfo/ProfileStatus.tsx","components/Profile/ProfileInfo/ProfileInfo.tsx","redux/propfile-reducer.ts","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/MyPosts/MyPostsContainer.tsx","components/Profile/Profile.tsx","components/Profile/ProfileContainer.tsx","components/Header/Header.tsx","redux/auth-reducer.ts","components/Header/HeaderContainer.tsx","common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","components/Login/Login.tsx","redux/app-reducer.ts","App.tsx","redux/redux-store.ts","index.tsx","common/FormsControls/FormsControls.module.css","assets/images/user.png","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Dialogs/DialogItem/DialogItem.module.css","components/Users/users.module.css","components/Header/Header.module.css"],"names":["module","exports","Boolean","window","location","hostname","match","Navbar","className","s","nav","item","to","activeClassName","active","Setting","News","Music","DialogItem","props","path","id","dialog","name","Message","message","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","placeholder","Dialogs","state","dialogsPage","dialogsElements","dialogs","map","d","key","messagesElements","messages","m","dialogsItems","values","sendMessage","newMassageBody","initialState","v1","dialogsReducer","action","type","body","mapStateToPropsForRedirect","isAuth","auth","withAuthRedirect","Component","connect","restProps","compose","dispatch","sendMessageAC","instance","axios","create","withCredentials","baseURL","headers","usersAPI","currentPage","pageSize","get","then","response","data","userId","post","delete","console","warn","profileAPI","getProfile","getStatus","updateStatus","status","put","authAPI","email","password","rememberMe","users","totalUsersCount","isFetching","followingInProgress","acceptFollow","acceptUnFollow","setToggleIsFetching","setToggleFollowingProgress","usersReducer","u","followed","filter","Users","pageCount","Math","ceil","pages","i","push","p","styles","selectedPage","onClick","e","onPageChanged","src","photos","small","userPhoto","alt","disabled","some","unFollow","follow","Preloader","preloader","UsersAPIContainer","pageNumber","setCurrentPage","getUsers","this","React","createSelector","usersPage","getPageSize","getTotalUsersCount","getCurrentPage","getIsFetching","getFollowingInProgress","items","totalCount","resultCode","ProfileStatus","editMode","activateEditMode","setState","deActivateEditMode","onStatusChange","currentTarget","value","prevProps","prevState","onDoubleClick","onChange","autoFocus","onBlur","ProfileInfo","profile","large","aboutMe","contacts","facebook","website","vk","twitter","instagram","youtube","github","mainLink","posts","likesCount","messageForNewPost","setStatus","profileReducer","newPost","newText","Post","content","ava","like","MyPosts","postsElements","postsBlock","newPostText","updateNewPostText","addPost","MyPostsContainer","profilePage","text","Profile","ProfileContainer","params","String","authorizedUserId","userProfile","getStatusProfile","updateStatusProfile","resultCod","withRouter","Header","header","loginBlock","login","logout","setAuthUserData","payload","getAuthUserData","authReducer","HeaderContainer","mapDispatchToProps","FormControl","input","meta","child","hasError","touched","error","formControl","children","Input","required","LoginReduxForm","validate","style","formSummaryError","errorMessage","length","stopSubmit","_error","formData","initialized","appReducer","App","initializeApp","render","DialogsContainer","UsersContainer","promise","Promise","all","app","rootReducer","combineReducers","formReducer","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ed8c764d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__414Xv\"};","module.exports = __webpack_public_path__ + \"static/media/Spinner-1s-200px.38058ab0.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__1qSj7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__2G52t\",\"item\":\"Navbar_item__Yr9KI\",\"active\":\"Navbar_active__3YByj\"};","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport s from './Navbar.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.active}>Profile</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.active}>Messages</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/users\" activeClassName={s.active}>Users</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.active}>News</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.active}>Music</NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/setting\" activeClassName={s.active}>Setting</NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;\r\n\r\n","import React from 'react';\r\n\r\nconst Setting = () => {\r\n    return (\r\n        <div>Setting</div>\r\n    )\r\n}\r\n\r\nexport default Setting;","import React from 'react';\r\n\r\nconst News = () => {\r\n    return (\r\n        <div>News</div>\r\n    )\r\n}\r\n\r\nexport default News;","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return (\r\n        <div>Music</div>\r\n    )\r\n}\r\n\r\nexport default Music;","import React from 'react';\r\nimport s from './DialogItem.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype DialogItemPropsType = {\r\n    id: string\r\n    name: string\r\n}\r\n\r\nconst DialogItem: React.FC<DialogItemPropsType> = (props) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={path} activeClassName={s.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './Message.module.css'\r\n\r\ntype MessagePropsType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\n\r\nconst Message: React.FC<MessagePropsType> = (props) => {\r\n    return (\r\n        <div className={s.message}>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport Message from \"./Message/Message\";\r\nimport {DialogsPageType} from \"../../redux/dialogs-reducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\n\r\nexport type DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    sendMessage: (newMassageBody: string) => void\r\n}\r\n\r\nconst Dialogs: React.FC<DialogsPropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n\r\n    let dialogsElements = state.dialogs.map(d => <DialogItem id={d.id} name={d.name} key={d.id}/>)\r\n    let messagesElements = state.messages.map(m => <Message id={m.id} message={m.message} key={m.id}/>)\r\n\r\n\r\n    let addNewMessage = (values: any) => {\r\n        props.sendMessage(values.newMassageBody);\r\n    }\r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={s.messages}>\r\n                <div> {messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AddMessageFormType = {\r\n    newMassageBody: string\r\n}\r\n\r\nconst AddMessageForm = (props: InjectedFormProps<AddMessageFormType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field component={\"textarea\"} name={\"newMassageBody\"} placeholder={\"Enter your message\"}/>\r\n            </div>\r\n            <div>\r\n                <button>Send</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: \"dialogAddMessageForm\"})(AddMessageForm);\r\n\r\nexport default Dialogs;","import {v1} from \"uuid\";\r\n\r\ntype SendMessageActionType = {\r\n    type: \"SEND-MESSAGE\"\r\n    newMassageBody: string\r\n}\r\n\r\nexport type DialogsReducerActionType = ReturnType<typeof sendMessageAC>\r\n\r\ntype DialogsType = {\r\n    id: string\r\n    name: string\r\n}\r\ntype MessagesType = {\r\n    id: string\r\n    message: string\r\n}\r\n\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\n\r\nlet initialState: DialogsPageType = {\r\n    dialogs: [\r\n        {id: v1(), name: \"Kleo\"},\r\n        {id: v1(), name: \"Hiperion\"},\r\n        {id: v1(), name: \"Susan\"},\r\n        {id: v1(), name: \"Gektar\"},\r\n        {id: v1(), name: \"Chuck\"}\r\n    ],\r\n    messages: [\r\n        {id: v1(), message: \"Hey\"},\r\n        {id: v1(), message: \"Yo man\"},\r\n        {id: v1(), message: \"hu you piople?\"}\r\n    ]\r\n}\r\n\r\n\r\nconst dialogsReducer = (state: DialogsPageType = initialState, action: DialogsReducerActionType): DialogsPageType => {\r\n    switch (action.type) {\r\n        case \"SEND-MESSAGE\":\r\n            let body = action.newMassageBody;\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, {id: v1(), message: body}],\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const sendMessageAC = (newMassageBody: string): SendMessageActionType => ({type: \"SEND-MESSAGE\", newMassageBody});\r\n\r\n\r\nexport default dialogsReducer;","import React, {ComponentType} from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../redux/redux-store\";\r\n\r\n\r\ntype RedirectComponentPropsType = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): RedirectComponentPropsType => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n};\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n\r\n\r\n    const RedirectComponent = (props: RedirectComponentPropsType) => {\r\n\r\n        let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to='/login'/>\r\n\r\n        return <Component {...restProps as T}/>\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n    return ConnectedAuthRedirectComponent;\r\n}","import React from 'react';\r\nimport Dialogs from \"./Dialogs\";\r\nimport {DialogsPageType, sendMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {compose, Dispatch} from \"redux\";\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage:DialogsPageType,\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    sendMessage: (newMassageBody: string) => void\r\n}\r\n\r\n\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        sendMessage: (newMassageBody: string) => {dispatch(sendMessageAC(newMassageBody));}\r\n    }\r\n}\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs);","import axios from \"axios\";\r\n\r\nconst instance = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        \"API-KEY\": \"d53ad02d-1ee2-4ffc-9e75-df6b59b01ee8\"\r\n    }\r\n})\r\n\r\n\r\nexport const usersAPI = {\r\n    getUsers(currentPage: number, pageSize: number) {\r\n        return instance.get(`users?page=${currentPage}&count=${pageSize}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    acceptFollow(userId: string) {\r\n        return instance.post(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    acceptUnFollow(userId: string) {\r\n        return instance.delete(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getProfile(userId: string) {\r\n        console.warn('Obsolete method. Please profileAPI object.')\r\n        return profileAPI.getProfile(userId);\r\n    }\r\n}\r\n\r\nexport const profileAPI = {\r\n    getProfile(userId: string) {\r\n        return instance.get(`profile/${userId}`)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    getStatus(userId: string) {\r\n        return instance.get('profile/status/' + userId)\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    },\r\n    updateStatus(status: string) {\r\n        return instance.put('profile/status/', {status: status})\r\n            .then(response => {\r\n                return response.data;\r\n            });\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    me() {\r\n        return instance.get(`auth/me`)\r\n            .then(response => {\r\n                return response.data;\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean = false) {\r\n        return instance.post(`auth/login`, { email, password, rememberMe });\r\n    },\r\n    logout() {\r\n        return instance.delete(`auth/login`);\r\n    }\r\n}","import {usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst FOLLOW = \"FOLLOW\";\r\nconst UNFOLLOW = \"UNFOLLOW\";\r\nconst SET_USERS = \"SET_USERS\";\r\nconst SET_CURRENT_PAGE = \"SET_CURRENT_PAGE\";\r\nconst SET_TOTAL_USER_COUNT = \"SET_TOTAL_USER_COUNT\";\r\nconst TOGGLE_IS_FETCHING = \"TOGGLE_IS_FETCHING\";\r\nconst TOGGLE_IS_FOLLOWING_PROGRESS = \"TOGGLE_IS_FOLLOWING_PROGRESS\";\r\n\r\n\r\ntype FollowActionType = {\r\n    type: typeof FOLLOW\r\n    userId: string\r\n}\r\ntype UnfollowActionType = {\r\n    type: typeof UNFOLLOW\r\n    userId: string\r\n}\r\ntype SetUsersActionType = {\r\n    type: typeof SET_USERS\r\n    users: Array<UsersType>\r\n}\r\ntype SetCurrentPageActionType = {\r\n    type: typeof SET_CURRENT_PAGE\r\n    currentPage: number\r\n}\r\ntype SetTotalUsersCountActionType = {\r\n    type: typeof SET_TOTAL_USER_COUNT\r\n    totalUsersCount: number\r\n}\r\ntype setToggleIsFetchingActionType = {\r\n    type: typeof TOGGLE_IS_FETCHING\r\n    isFetching: boolean\r\n}\r\ntype setToggleIsFollowingProgressActionType = {\r\n    type: typeof TOGGLE_IS_FOLLOWING_PROGRESS\r\n    isFetching: boolean\r\n    userId: string\r\n}\r\n\r\nexport type UsersReducerActionsType =\r\n    ReturnType<typeof acceptFollow>\r\n    | ReturnType<typeof acceptUnFollow>\r\n    | ReturnType<typeof setUsers>\r\n    | ReturnType<typeof setCurrentPage>\r\n    | ReturnType<typeof setUsersCount>\r\n    | ReturnType<typeof setToggleIsFetching>\r\n    | ReturnType<typeof setToggleFollowingProgress>\r\n\r\n\r\nlet initialState = {\r\n    users: [] as Array<UsersType>,\r\n    pageSize: 5,\r\n    totalUsersCount: 0,\r\n    currentPage: 1,\r\n    isFetching: true,\r\n    followingInProgress: [] as Array<string>\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\n\r\nexport type LocationType = {\r\n    city: string\r\n    country: string\r\n}\r\n\r\nexport type PhotosType = {\r\n    small: string | null\r\n    large: string | null\r\n}\r\n\r\nexport type UsersType = {\r\n    id: string\r\n    photos: PhotosType\r\n    followed: boolean\r\n    name: string\r\n    status: string\r\n    location: LocationType\r\n}\r\n\r\nconst usersReducer = (state: InitialStateType = initialState, action: UsersReducerActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case FOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case UNFOLLOW:\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false};\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case SET_USERS:\r\n            return {\r\n                ...state,\r\n                users: [...action.users]\r\n            }\r\n        case SET_CURRENT_PAGE:\r\n            return {...state, currentPage: action.currentPage}\r\n        case SET_TOTAL_USER_COUNT:\r\n            return {...state, totalUsersCount: action.totalUsersCount}\r\n        case TOGGLE_IS_FETCHING:\r\n            return {...state, isFetching: action.isFetching}\r\n        case TOGGLE_IS_FOLLOWING_PROGRESS:\r\n            return {\r\n                ...state, followingInProgress: action.isFetching\r\n                    ? [...state.followingInProgress, action.userId]\r\n                    : state.followingInProgress.filter(id => id !== action.userId)\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const acceptFollow = (userId: string): FollowActionType => {\r\n    return {\r\n        type: FOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const acceptUnFollow = (userId: string): UnfollowActionType => {\r\n    return {\r\n        type: UNFOLLOW,\r\n        userId\r\n    } as const\r\n}\r\nexport const setUsers = (users: Array<UsersType>): SetUsersActionType => {\r\n    return {\r\n        type: SET_USERS,\r\n        users\r\n    } as const\r\n}\r\nexport const setCurrentPage = (currentPage: number): SetCurrentPageActionType => {\r\n    return {\r\n        type: SET_CURRENT_PAGE,\r\n        currentPage\r\n    } as const\r\n}\r\nexport const setUsersCount = (totalUsersCount: number): SetTotalUsersCountActionType => {\r\n    return {\r\n        type: SET_TOTAL_USER_COUNT,\r\n        totalUsersCount\r\n    } as const\r\n}\r\nexport const setToggleIsFetching = (isFetching: boolean): setToggleIsFetchingActionType => {\r\n    return {\r\n        type: TOGGLE_IS_FETCHING,\r\n        isFetching\r\n    } as const\r\n}\r\nexport const setToggleFollowingProgress = (isFetching: boolean, userId: string): setToggleIsFollowingProgressActionType => {\r\n    return {\r\n        type: TOGGLE_IS_FOLLOWING_PROGRESS,\r\n        isFetching,\r\n        userId\r\n    } as const\r\n}\r\n\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number) => {\r\n    return (dispatch: Dispatch< UsersReducerActionsType>) => {\r\n        dispatch(setToggleIsFetching(true));\r\n        usersAPI.getUsers(currentPage, pageSize)\r\n            .then(data => {\r\n                dispatch(setToggleIsFetching(false));\r\n                dispatch(setUsers(data.items));\r\n                dispatch(setUsersCount(data.totalCount));\r\n            });\r\n    }\r\n}\r\nexport const follow = (userId: string) => {\r\n    return (dispatch: Dispatch< UsersReducerActionsType>) => {\r\n        dispatch(setToggleFollowingProgress(true, userId));\r\n        usersAPI.acceptFollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(acceptFollow(userId));\r\n                }\r\n                dispatch(setToggleFollowingProgress(false, userId));\r\n            });\r\n    }\r\n}\r\nexport const unFollow = (userId: string) => {\r\n    return (dispatch: Dispatch< UsersReducerActionsType>) => {\r\n        dispatch(setToggleFollowingProgress(true, userId));\r\n        usersAPI.acceptUnFollow(userId)\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    dispatch(acceptUnFollow(userId));\r\n                }\r\n                dispatch(setToggleFollowingProgress(false, userId));\r\n            });\r\n    }\r\n}\r\n\r\nexport default usersReducer;","import React from \"react\";\r\nimport styles from \"./users.module.css\";\r\nimport userPhoto from \"../../assets/images/user.png\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\n\r\ntype PropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    onPageChanged: (pageNumber: number) => void\r\n    followingInProgress: Array<string>\r\n    follow: (userId: string) => void\r\n    unFollow: (userId: string) => void\r\n}\r\n\r\nconst Users = (props: PropsType) => {\r\n\r\n    let pageCount: number = Math.ceil(props.totalUsersCount / props.pageSize);\r\n    let pages = [];\r\n    for (let i: number = 1; i <= pageCount; i++) {\r\n        pages.push(i);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                {\r\n                    pages.map(p => {\r\n                        return <span className={props.currentPage === p ? styles.selectedPage : ''}\r\n                                     onClick={(e) => props.onPageChanged(p)}> {p}</span>\r\n                    })\r\n                }\r\n            </div>\r\n            {\r\n                props.users.map(u => <div key={u.id}>\r\n                    <span>\r\n                        <div>\r\n                            <NavLink to={'/profile/' + u.id}>\r\n                        <img src={u.photos.small !== null ? u.photos.small : userPhoto} className={styles.userPhoto}\r\n                             alt={\"аватар\"}/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                            {u.followed ?\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.unFollow(u.id)\r\n                                }}>UnFollow</button> :\r\n                                <button disabled={props.followingInProgress.some(id => id === u.id)} onClick={() => {\r\n                                    props.follow(u.id)\r\n                                }}>Follow</button>}\r\n                        </div>\r\n                    </span>\r\n                    <span>\r\n                        <span>\r\n                            <div>{u.name}</div><div>{u.status}</div>\r\n                        </span>\r\n                        <span>\r\n                            <div>{\"u.location.country\"}</div>\r\n                            <div>{\"u.location.city\"}</div>\r\n                        </span>\r\n                    </span>\r\n                </div>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Users;","import React from \"react\";\r\nimport preloader from \"../../assets/images/Spinner-1s-200px.svg\";\r\n\r\ntype PropsType = {\r\n\r\n}\r\n\r\n\r\nconst Preloader = (props: PropsType) => {\r\n    return (\r\n        <img src={preloader} alt={\"loader\"}/>\r\n    )\r\n}\r\n\r\nexport default Preloader;","import React from \"react\";\r\nimport {UsersType} from \"../../redux/users-reducer\";\r\nimport Users from \"./Users\";\r\nimport Preloader from \"../../common/Preloader/Preloader\";\r\n\r\ntype PropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    acceptFollow: (userId: string) => void\r\n    acceptUnFollow: (userId: string) => void\r\n    currentPage: number\r\n    setCurrentPage: (pageNumber: number) => void\r\n    isFetching: boolean\r\n    setToggleFollowingProgress: (isFetching: boolean, userId: string) => void\r\n    followingInProgress: Array<string>\r\n    getUsers: (currentPage: number, pageSize: number) => void\r\n    follow: (userId: string) => void\r\n    unFollow: (userId: string) => void\r\n}\r\n\r\nclass UsersAPIContainer extends React.Component <PropsType> {\r\n\r\n    componentDidMount() {\r\n        this.props.getUsers(this.props.currentPage, this.props.pageSize);\r\n    }\r\n\r\n    onPageChanged = (pageNumber: number) => {\r\n        this.props.setCurrentPage(pageNumber);\r\n        this.props.getUsers(pageNumber, this.props.pageSize);\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                {this.props.isFetching === false ? <Users\r\n                    users={this.props.users}\r\n                    totalUsersCount={this.props.totalUsersCount}\r\n                    pageSize={this.props.pageSize}\r\n                    currentPage={this.props.currentPage}\r\n                    onPageChanged={this.onPageChanged}\r\n                    followingInProgress={this.props.followingInProgress}\r\n                    follow={this.props.follow}\r\n                    unFollow={this.props.unFollow}\r\n                /> : \"\"}\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UsersAPIContainer;","import {createSelector} from \"reselect\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst getUsersSelector = (state: AppStateType) => {\r\n    return state.usersPage.users;\r\n}\r\n\r\nexport const getUsers = createSelector(getUsersSelector,\r\n    (users) => {\r\n        return users.filter(u => true);\r\n    })\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n    return state.usersPage.pageSize;\r\n}\r\n\r\nexport const getTotalUsersCount = (state: AppStateType) => {\r\n    return state.usersPage.totalUsersCount;\r\n}\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n    return state.usersPage.currentPage;\r\n}\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n    return state.usersPage.isFetching;\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType) => {\r\n    return state.usersPage.followingInProgress;\r\n}\r\n\r\n// export const countSomethingDifficult = (state) => {\r\n//     debugger\r\n//     //for... math... big arrays\r\n//     let count = 23;\r\n//     return count;\r\n// }","import {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {\r\n    acceptFollow,\r\n    setCurrentPage,\r\n    setToggleFollowingProgress,\r\n    acceptUnFollow,\r\n    UsersType, follow, unFollow, requestUsers\r\n} from \"../../redux/users-reducer\";\r\nimport UsersAPIContainer from \"./UsersAPIContainer\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUsersCount, getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    users: Array<UsersType>\r\n    pageSize: number\r\n    totalUsersCount: number\r\n    currentPage: number\r\n    isFetching: boolean\r\n    followingInProgress: Array<string>\r\n}\r\n\r\n\r\n// let mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n//     return {\r\n//         users: state.usersPage.users,\r\n//         pageSize: state.usersPage.pageSize,\r\n//         totalUsersCount: state.usersPage.totalUsersCount,\r\n//         currentPage: state.usersPage.currentPage,\r\n//         isFetching: state.usersPage.isFetching,\r\n//         followingInProgress: state.usersPage.followingInProgress\r\n//     }\r\n// }\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        users: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUsersCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, {\r\n    acceptFollow,\r\n    acceptUnFollow,\r\n    setCurrentPage,\r\n    setToggleFollowingProgress,\r\n    getUsers: requestUsers,\r\n    follow,\r\n    unFollow\r\n})(UsersAPIContainer);","import React, {ChangeEvent} from 'react';\r\n\r\n\r\ntype PropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nclass ProfileStatus extends React.Component<PropsType> {\r\n\r\n    state = {\r\n        editMode: false,\r\n        status: this.props.status\r\n    }\r\n\r\n    activateEditMode = () => {\r\n        this.setState({\r\n            editMode: true    // асинхронен\r\n        })\r\n    }\r\n    deActivateEditMode = () => {\r\n        this.setState({\r\n            editMode: false    // асинхронен\r\n        })\r\n        this.props.updateStatus(this.state.status);\r\n    }\r\n    onStatusChange = (e: ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({\r\n            status: e.currentTarget.value\r\n        })\r\n    }\r\n    componentDidUpdate(prevProps: PropsType, prevState: PropsType) {\r\n        if(prevProps.status !== this.props.status) {\r\n            this.setState({\r\n                status: this.props.status\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div>\r\n                    {!this.state.editMode &&\r\n                    <div>\r\n                        <span onDoubleClick={this.activateEditMode}>{this.props.status || \"-----\"}</span>\r\n                    </div>}\r\n                </div>\r\n                <div>\r\n                    {this.state.editMode &&\r\n                    <div>\r\n                        <input onChange={this.onStatusChange} autoFocus={true} onBlur={this.deActivateEditMode} value={this.state.status}/>\r\n                    </div>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ProfileStatus;","import React from 'react';\r\nimport {ProfileType} from \"../../../redux/propfile-reducer\";\r\nimport Preloader from \"../../../common/Preloader/Preloader\";\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport ProfileStatus from './ProfileStatus';\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst ProfileInfo = (props: PropsType) => {\r\n    if(!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div>\r\n                    <img src={props.profile.photos.large ? props.profile.photos.large : userPhoto} alt={\"аватар пользователя\"}/>\r\n                    <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                </div>\r\n                <div>\r\n                    Обо мне: {props.profile.aboutMe}\r\n                </div>\r\n                <div>\r\n                    <h1>Мои контакты</h1>\r\n                    <div>{props.profile.contacts?.facebook}</div>\r\n                    <div>{props.profile.contacts?.website}</div>\r\n                    <div>{props.profile.contacts?.vk}</div>\r\n                    <div>{props.profile.contacts?.twitter}</div>\r\n                    <div>{props.profile.contacts?.instagram}</div>\r\n                    <div>{props.profile.contacts?.youtube}</div>\r\n                    <div>{props.profile.contacts?.github}</div>\r\n                    <div>{props.profile.contacts?.mainLink}</div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;","import {v1} from \"uuid\";\r\nimport {PhotosType} from \"./users-reducer\";\r\nimport {profileAPI, usersAPI} from \"../api/api\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst ADD_POST = \"ADD_POST\";\r\nconst CHANGE_NEW_TEXT = \"CHANGE_NEW_TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\n\r\nexport type PostsType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\ntype ContactsType = {\r\n    facebook: null | string\r\n    website: null | string\r\n    vk: null | string\r\n    twitter: null | string\r\n    instagram: null | string\r\n    youtube: null | string\r\n    github: null | string\r\n    mainLink: null | string\r\n}\r\n\r\nexport type ProfType = {\r\n    aboutMe: null | string\r\n    contacts: ContactsType\r\n    lookingForAJob: null | boolean\r\n    lookingForAJobDescription: null | string\r\n    fullName: null | string\r\n    userId: null | number\r\n    photos: PhotosType\r\n}\r\n\r\ntype AddPostActionType = {\r\n    type: typeof ADD_POST\r\n}\r\ntype ChangeNewTextActionType = {\r\n    type: typeof CHANGE_NEW_TEXT\r\n    newText: string\r\n}\r\nexport type ProfileType = ProfType | null\r\n\r\ntype setUserProfileActionType = {\r\n    type: typeof SET_USER_PROFILE\r\n    profile: ProfileType\r\n}\r\n\r\nexport type ProfilePageType = {\r\n    posts: Array<PostsType>\r\n    messageForNewPost: string\r\n    profile: ProfileType\r\n    status: string\r\n}\r\nexport type setStatusActionType = {\r\n    type: typeof SET_STATUS\r\n    status: string\r\n}\r\n\r\nexport type ProfileReducerActionsType =\r\n    ReturnType<typeof addPost>\r\n    | ReturnType<typeof changeNewText>\r\n    | ReturnType<typeof setUserProfile>\r\n    | ReturnType<typeof setStatus>\r\n\r\n\r\nlet initialState: ProfilePageType = {\r\n    posts: [\r\n        {id: v1(), message: \"Hello, it's my first post lol\", likesCount: 777},\r\n        {id: v1(), message: \"How are you?\", likesCount: 1327}\r\n    ] as Array<PostsType>,\r\n    messageForNewPost: \"\",\r\n    profile: null,\r\n    status: \"\"\r\n}\r\n\r\n\r\nconst profileReducer = (state: ProfilePageType = initialState, action: ProfileReducerActionsType): ProfilePageType => {\r\n    switch (action.type) {\r\n        case ADD_POST: {\r\n            const newPost: PostsType = {\r\n                id: v1(),\r\n                message: state.messageForNewPost,\r\n                likesCount: 0\r\n            };\r\n            return {\r\n                ...state,\r\n                posts: [newPost, ...state.posts]\r\n            }\r\n        }\r\n        case CHANGE_NEW_TEXT:\r\n            return {\r\n                ...state,\r\n                messageForNewPost: action.newText\r\n            }\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            }\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const addPost = (): AddPostActionType => {\r\n    return {\r\n        type: ADD_POST,\r\n    } as const\r\n}\r\nexport const changeNewText = (newText: string): ChangeNewTextActionType => {\r\n    return {\r\n        type: CHANGE_NEW_TEXT,\r\n        newText\r\n    } as const\r\n}\r\nexport const setUserProfile = (profile: ProfileType): setUserProfileActionType => {\r\n    return {\r\n        type: SET_USER_PROFILE,\r\n        profile\r\n    } as const\r\n}\r\nexport const setStatus = (status: string): setStatusActionType => {\r\n    return {\r\n        type: SET_STATUS,\r\n        status\r\n    }\r\n}\r\n\r\nexport const userProfile = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        usersAPI.getProfile(userId)\r\n            .then(data => {\r\n                dispatch(setUserProfile(data));\r\n            })\r\n    }\r\n}\r\nexport const getStatusProfile = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.getStatus(userId)\r\n            .then(data => {\r\n                dispatch(setStatus(data));\r\n            })\r\n    }\r\n}\r\nexport const updateStatusProfile = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        profileAPI.updateStatus(status)\r\n            .then(data => {\r\n                if(data.resultCod === 0) {\r\n                    dispatch(setStatus(data));\r\n                }\r\n            })\r\n    }\r\n}\r\n\r\nexport default profileReducer;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PropsType = {\r\n    id: string\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nconst Post = (props: PropsType) => {\r\n    return (\r\n        <div className={s.content}>\r\n            <div>\r\n                <div className={s.ava}>\r\n                    <img\r\n                        src='https://s3.amazonaws.com/liberty-uploads/wp-content/uploads/sites/1218/2015/09/avatarsucks.jpg' alt={\"avatar\"}/>\r\n                    {props.message}\r\n                    <div className={s.like}>\r\n                        <img src='https://banner2.cleanpng.com/20181001/rhs/kisspng-like-button-social-media-image-facebook-messenger-health-insurance-life-insurance-and-medicare-plan-5bb209e2eacd98.4287911215383945949618.jpg' alt={\"avatar\"} />{props.likesCount}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from \"./Post/Post\";\r\nimport {PostsType} from \"../../../redux/propfile-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n    updateNewPostText: (text: string) => void\r\n    addPost: (text: string) => void\r\n}\r\n\r\nconst MyPosts: React.FC<PropsType> = (props) => {\r\n\r\n    let postsElements = props.posts.map(p => <Post\r\n        key={p.id} id={p.id} message={p.message} likesCount={p.likesCount}/>)\r\n\r\n    const addPost = () => {\r\n        props.addPost(props.newPostText);\r\n        props.updateNewPostText(\"\");\r\n    }\r\n    const newTextChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        props.updateNewPostText(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div className={s.postsBlock}>\r\n            <div>\r\n                <div>\r\n                    My post\r\n                </div>\r\n                <textarea value={props.newPostText} onChange={newTextChangeHandler}/>\r\n                <button onClick={addPost}>add post</button>\r\n                {postsElements}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyPosts;","import {addPost, changeNewText, PostsType} from \"../../../redux/propfile-reducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../../redux/redux-store\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    posts: Array<PostsType>\r\n    newPostText: string\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addPost: () => void\r\n    updateNewPostText: (text: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n        newPostText: state.profilePage.messageForNewPost\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MapDispatchPropsType => {\r\n    return {\r\n        addPost: () => {\r\n            dispatch(addPost());\r\n        },\r\n        updateNewPostText: (text: string) => {\r\n            let action = changeNewText(text);\r\n            dispatch(action);\r\n        }\r\n    }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts);\r\n\r\nexport default MyPostsContainer;","import React from 'react';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\nimport MyPostsContainer from \"./MyPosts/MyPostsContainer\";\r\nimport {ProfileType} from \"../../redux/propfile-reducer\";\r\n\r\n\r\ntype PropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\n\r\nconst Profile: React.FC<PropsType> = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <ProfileInfo profile={props.profile} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport {getStatusProfile, ProfileType, updateStatusProfile, userProfile} from \"../../redux/propfile-reducer\";\r\nimport {RouteComponentProps, withRouter} from 'react-router-dom';\r\nimport {withAuthRedirect} from \"../../HOC/withAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\ntype PathParamsType = {\r\n    userId: string\r\n}\r\n\r\ntype MapStatePropsType = {\r\n    profile: ProfileType\r\n    status: string\r\n    isAuth: boolean\r\n    authorizedUserId: number | null\r\n\r\n}\r\ntype MapDispatchPropsType = {\r\n    userProfile: (userId: string) => void\r\n    getStatusProfile: (userId: string) => void\r\n    updateStatusProfile: (status: string) => void\r\n}\r\ntype OwnPropsType = MapStatePropsType & MapDispatchPropsType\r\nexport type ProfileContainerPropsType = RouteComponentProps<PathParamsType> & OwnPropsType\r\n\r\nclass ProfileContainer extends React.Component<ProfileContainerPropsType> {\r\n\r\n    componentDidMount(): void {\r\n        let userId = this.props.match.params.userId;\r\n        if(!userId) {\r\n            userId = String(this.props.authorizedUserId);\r\n        }\r\n        this.props.userProfile(userId);\r\n        this.props.getStatusProfile(userId);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Profile {...this.props} profile={this.props.profile} status={this.props.status} updateStatus={this.props.updateStatusProfile}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {userProfile, getStatusProfile, updateStatusProfile}),\r\n    withRouter,\r\n    withAuthRedirect,\r\n)(ProfileContainer);","import React from 'react';\r\nimport s from './Header.module.css'\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype PropsType = {\r\n    isAuth: boolean\r\n    login: string | null\r\n    logout: () => void\r\n}\r\n\r\nconst Header = (props: PropsType) => {\r\n    return (\r\n        <header className={s.header}>\r\n            <img src=\"https://s2.logaster.com/static/v3/img/products/logo.png\" alt={'логотип'}/>\r\n            <div className={s.loginBlock}>\r\n                {props.isAuth\r\n                    ? <div>{props.login} - <button onClick={props.logout}>Log out</button> </div>\r\n                    : <NavLink to={'/login'}>Login</NavLink> }\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import {Dispatch} from \"redux\";\r\nimport {authAPI} from \"../api/api\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\n\r\nexport type AuthType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\nexport type AuthDataType = {\r\n    userId: number | null\r\n    email: string | null\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\ntype SetUserDataActionType = {\r\n    type: typeof SET_USER_DATA\r\n    payload: AuthDataType\r\n}\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType,\r\n    Dispatch<AuthReducerActionsType>, AuthReducerActionsType>\r\n\r\nlet initialState: AuthType = {\r\n    userId: null,\r\n    email: null,\r\n    login: null,\r\n    isAuth: false\r\n};\r\nexport type AuthReducerActionsType = ReturnType<typeof setAuthUserData>\r\n\r\nconst authReducer = (state: AuthType = initialState, action: AuthReducerActionsType): AuthType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                ...action.payload\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthUserData = (userId: number | null, email: string | null, login: string | null, isAuth: boolean): SetUserDataActionType => (\r\n    {\r\n        type: SET_USER_DATA,\r\n        payload: {userId, email, login, isAuth}\r\n    });\r\n\r\nexport const getAuthUserData = (): ThunkType => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.me()\r\n            .then(data => {\r\n                if (data.resultCode === 0) {\r\n                    let {id, email, login} = data.data\r\n                    dispatch(setAuthUserData(id, email, login, true));\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const login = (email: string, password: string, rememberMe: boolean): ThunkType => (dispatch) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(getAuthUserData())\r\n            } else {\r\n                const errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : 'Some error'\r\n                // @ts-ignore\r\n                dispatch(stopSubmit('login', {_error: errorMessage}))\r\n            }\r\n        });\r\n}\r\n\r\nexport const logout = (): ThunkType => (dispatch) => {\r\n    authAPI.logout()\r\n        .then(response => {\r\n            if (response.data.resultCode === 0) {\r\n                dispatch(setAuthUserData(null, null, null, false));\r\n            }\r\n        });\r\n}\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {getAuthUserData, logout} from \"../../redux/auth-reducer\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    login: string | null\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    getAuthUserData: () => void\r\n    logout: () => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass HeaderContainer extends React.Component<PropsType> {\r\n    componentDidMount() {\r\n        this.props.getAuthUserData();\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Header {...this.props}/>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    login: state.auth.login,\r\n    isAuth: state.auth.isAuth\r\n});\r\nconst mapDispatchToProps = {\r\n    getAuthUserData,\r\n    logout\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HeaderContainer);","import React from \"react\";\r\nimport styles from \"./FormsControls.module.css\";\r\n\r\nconst FormControl = ({input, meta, child, ...props}: any) => {\r\n    const hasError = meta.touched && meta.error;\r\n    return (\r\n        <div className={styles.formControl + \" \" + (hasError ? styles.error : \"\")}>\r\n            <div>\r\n                {props.children}\r\n            </div>\r\n            { hasError && <span>{meta.error}</span> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input = (props: any) => {\r\n    const {input, meta, child, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}","export const required = (value: string) => {\r\n    if (value) return undefined;\r\n\r\n    return \"Field is required\";\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n    return undefined;\r\n}","import React from \"react\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {Input} from \"../../common/FormsControls/FormsControls\";\r\nimport {required} from \"../../utils/validators/validators\";\r\nimport {login} from \"../../redux/auth-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppStateType} from \"../../redux/redux-store\";\r\nimport style from \"../../common/FormsControls/FormsControls.module.css\"\r\n\r\ntype FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\n\r\nconst LoginForm = (props: InjectedFormProps<FormDataType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <h3>Данные тестового аккаунта:  </h3>\r\n                <h4>Email: free@samuraijs.com</h4>\r\n                <h4>Password: free</h4>\r\n            </div>\r\n\r\n            <div>\r\n                <Field placeholder={\"Email\"} name={\"email\"}\r\n                       component={Input}\r\n                       validate={[required]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field placeholder={\"Password\"} name={\"password\"} type={\"password\"}\r\n                       validate={[required]}\r\n                       component={Input}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Field type={\"checkbox\"} name={\"rememberMe\"} component={Input}/> remember me\r\n            </div>\r\n            { props.error && <div className={style.formSummaryError}>\r\n                {props.error}\r\n            </div>\r\n            }\r\n            <div>\r\n                <button>Login</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login'})(LoginForm);\r\n\r\ntype MapStateToPropsType = {\r\n    isAuth: boolean\r\n}\r\ntype MapDispatchToPropsType = {\r\n    login: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\ntype LoginPropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\nconst Login = (props: LoginPropsType) => {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.login(formData.email, formData.password, formData.rememberMe);\r\n    }\r\n\r\n    if (props.isAuth) {\r\n        return <Redirect to={\"/profile\"}/>\r\n    }\r\n\r\n    return <div>\r\n        <h1>Login</h1>\r\n        <LoginReduxForm onSubmit={onSubmit}/>\r\n    </div>\r\n}\r\nconst mapStateToProps = (state: AppStateType): MapStateToPropsType => ({\r\n    isAuth: state.auth.isAuth\r\n})\r\n\r\nexport default connect(mapStateToProps, {login})(Login);","import {getAuthUserData} from \"./auth-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {ThunkAction} from \"redux-thunk\";\r\nimport {AppStateType} from \"./redux-store\";\r\n\r\nconst INITIALIZED_SUCCESS = 'INITIALIZED_SUCCESS';\r\n\r\ntype InitialStateType = {\r\n    initialized: boolean\r\n}\r\nexport type AppReducerActionType = ReturnType<typeof initializedSuccess>\r\ntype ThunkType = ThunkAction<void, AppStateType,\r\n    Dispatch<AppReducerActionType>, AppReducerActionType>\r\n\r\nlet initialState: InitialStateType = {\r\n    initialized: false\r\n};\r\n\r\nconst appReducer = (state = initialState, action: AppReducerActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case INITIALIZED_SUCCESS:\r\n            return {\r\n                ...state,\r\n                initialized: true\r\n            }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const initializedSuccess = () => ({type: INITIALIZED_SUCCESS});\r\n\r\nexport const initializeApp = (): ThunkType => (dispatch) => {\r\n    let promise = dispatch(getAuthUserData());\r\n    debugger\r\n    //dispatch(somethingelse());\r\n    //dispatch(somethingelse());\r\n    Promise.all([promise])\r\n        .then(() => {\r\n            dispatch(initializedSuccess());\r\n        });\r\n}\r\n\r\n\r\nexport default appReducer;","import React, {ComponentType} from 'react';\r\nimport './App.css';\r\nimport Navbar from \"./components/Navbar/Navbar\";\r\nimport {Route, withRouter} from 'react-router-dom';\r\nimport Setting from \"./components/Setting/Setting\";\r\nimport News from \"./components/News/News\";\r\nimport Music from \"./components/Music/Music\";\r\nimport DialogsContainer from \"./components/Dialogs/DialogsContainer\";\r\nimport UsersContainer from \"./components/Users/UsersContainer\";\r\nimport ProfileContainer from \"./components/Profile/ProfileContainer\";\r\nimport HeaderContainer from \"./components/Header/HeaderContainer\";\r\nimport LoginPage from \"./components/Login/Login\";\r\nimport {initializeApp} from \"./redux/app-reducer\";\r\nimport {connect} from \"react-redux\";\r\nimport {compose} from \"redux\";\r\nimport Preloader from \"./common/Preloader/Preloader\";\r\nimport {AppStateType} from \"./redux/redux-store\";\r\n\r\n\r\ntype MapStatePropsType = {\r\n    initialized: boolean\r\n}\r\ntype MapDispatchPropsType = {\r\n    initializeApp: () => void\r\n}\r\ntype PropsType = MapStatePropsType & MapDispatchPropsType\r\n\r\nclass App extends React.Component<PropsType, AppStateType> {\r\n    componentDidMount() {\r\n        this.props.initializeApp();\r\n    }\r\n\r\n    render() {\r\n        if (!this.props.initialized) {\r\n            return <Preloader/>\r\n        }\r\n        return (\r\n            <div className=\"app-wrapper\">\r\n                <HeaderContainer/>\r\n                <Navbar/>\r\n                <div className=\"app-wrapper-content\">\r\n                    <Route path='/profile/:userId?' render={() => <ProfileContainer/>}/>\r\n                    <Route path='/dialogs' render={() => <DialogsContainer/>}/>\r\n                    <Route path='/users' render={() => <UsersContainer/>}/>\r\n                    <Route path='/news' render={() => <News/>}/>\r\n                    <Route path='/music' render={() => <Music/>}/>\r\n                    <Route path='/setting' render={() => <Setting/>}/>\r\n                    <Route path='/login' render={() => <LoginPage/>}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => ({\r\n    initialized: state.app.initialized\r\n})\r\nconst mapDispatchToProps = {\r\n    initializeApp\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    withRouter,\r\n    connect(mapStateToProps,mapDispatchToProps),)(App);","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport profileReducer from \"./propfile-reducer\";\r\nimport dialogsReducer from \"./dialogs-reducer\";\r\nimport usersReducer from \"./users-reducer\";\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware  from \"redux-thunk\";\r\nimport { reducer as formReducer } from \"redux-form\";\r\nimport appReducer from \"./app-reducer\";\r\n\r\nlet rootReducer = combineReducers({\r\n    profilePage: profileReducer,\r\n    dialogsPage: dialogsReducer,\r\n    usersPage: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer\r\n})\r\n\r\n\r\nexport type AppStateType = ReturnType<typeof rootReducer>\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));","import React from 'react';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./redux/redux-store\";\r\n\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <Provider store={store}>\r\n            <App/>\r\n        </Provider>\r\n    </BrowserRouter>, document.getElementById('root'));\r\n\r\n\r\n// store.subscribe(rerenderEntireTree);\r\n// store._rerenderEntireTree();\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2NSsY\",\"error\":\"FormsControls_error__bJs-R\",\"formSummaryError\":\"FormsControls_formSummaryError__2PPV6\"};","module.exports = __webpack_public_path__ + \"static/media/user.7cc7a630.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2IEOm\",\"dialogsItems\":\"Dialogs_dialogsItems__jGSX3\",\"messages\":\"Dialogs_messages__3oOx8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"Post_ava__2agg8\",\"like\":\"Post_like__2Oocl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialog\":\"DialogItem_dialog__2nQda\",\"active\":\"DialogItem_active__3nl2G\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"userPhoto\":\"users_userPhoto__3jiaO\",\"selectedPage\":\"users_selectedPage__3qTNP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__3Ipvi\",\"loginBlock\":\"Header_loginBlock__2yB1v\"};"],"sourceRoot":""}